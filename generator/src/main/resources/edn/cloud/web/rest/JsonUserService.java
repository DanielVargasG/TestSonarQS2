 package edn.cloud.web.rest;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;

import edn.cloud.business.api.util.UtilCodesEnum;
import edn.cloud.business.dto.SFUserPhotoDto;
import edn.cloud.business.dto.integration.DocInfoDto;
import edn.cloud.business.dto.integration.SFPhotoDto;
import edn.cloud.business.dto.integration.SFUserDto;
import edn.cloud.business.dto.ppd.api.PpdSigningDataDto;
import edn.cloud.business.dto.ppd.api.PpdtokenDto;
import edn.cloud.business.dto.sfactor.SFSigningControlHeadDto;
import edn.cloud.ppdoc.business.facade.PpdApiUtilsFacade;
import edn.cloud.ppdoc.business.facade.PpdEmployeeApiFacade;
import edn.cloud.ppdoc.business.facade.PpdGeneratorFacade;
import edn.cloud.sfactor.business.facade.SuccessFactorFacade;
import edn.cloud.sfactor.business.impl.document.SuccessFactorAuthorization;
import edn.cloud.sfactor.persistence.dao.EmployeeDAO;
import edn.cloud.sfactor.persistence.dao.FavoriteDAO;
import edn.cloud.sfactor.persistence.entities.Employee;
import edn.cloud.sfactor.persistence.entities.Favorite;
import edn.cloud.sfactor.persistence.entities.SignatureFileControl;
import edn.cloud.web.service.SessionCreateFilter;

@Path("/json/user")
public class JsonUserService {
	@Context
	HttpServletRequest request;

	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	private PpdGeneratorFacade ppdGeneratorFacade = new PpdGeneratorFacade();
	private PpdApiUtilsFacade ppdApiUtilsFacade = new PpdApiUtilsFacade();
	private PpdEmployeeApiFacade ppdEmployeeF = new PpdEmployeeApiFacade();
	private SuccessFactorFacade successFactorFacade = new SuccessFactorFacade();	
	private PpdtokenDto objToken;

	@GET
	@Path("/document")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getEmployeeDocumentList() {
		List<DocInfoDto> doc = new ArrayList<DocInfoDto>();
		try {
			String data = ppdApiUtilsFacade.getToken();
			Gson token = new Gson();
			Gson gson = new Gson();

			Map<String, Serializable> map = new HashMap<String, Serializable>();
			map.put("employee_id", "mtuitel");
			map.put("per_page", 100);

			logger.info(gson.toJson(map));

			this.objToken = token.fromJson(data, PpdtokenDto.class);
			if (objToken.getToken_type().equals("bearer")) {
				DocInfoDto[] data2 = ppdEmployeeF.wServiceEmployeeDocument("mtuitel");

				FavoriteDAO favDAO = new FavoriteDAO();
				Collection<Favorite> li = favDAO.findAllFav(getSFUser());

				for (int i = 0; i < data2.length; i++) {
					DocInfoDto docTemplate = data2[i];

					for (Favorite favorite : li) {
						if (favorite.getTemplateId().equals(docTemplate.getId())) {
							docTemplate.setActive(true);
						}
					}
					doc.add(docTemplate);

				}
				return Response.status(200).entity(doc).build();
			} else {
				logger.error("> error - Session was not opened");
				return Response.status(200).entity(doc).build();
			}
		} catch (Exception ex) {

			logger.error("> error - Connection was not working with PPDoc");
			logger.error(ex.toString());

			return Response.status(200).entity(doc).build();
		}

	}

	@GET
	@Path("/list")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getUsers() {
		EmployeeDAO uDAO = new EmployeeDAO();
		Collection<Employee> li = uDAO.getAll();

		logger.info("length {}", li.size());

		return Response.status(200).entity(li).build();
	}

	@GET
	@Path("/list/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getUser(@PathParam("id") String id) {
		SFUserDto sfuser = new SFUserDto();
		try {
			sfuser = successFactorFacade.userGetProfile(id, "9999-01-01");
			logger.trace(">> {}", sfuser.callFirstName());
			logger.trace(">> {}", sfuser.callLastName());

		} catch (Exception ex) {
			logger.error("User '{}' could not be extracted from backend. The user will be initialized simply.", id, ex);
			// logger.error(">> SF Error not listed");
		}

		return Response.status(200).entity(sfuser).build();
	}

	@GET
	@Path("/signatures")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getSignatures(String externalId) {
		List<DocInfoDto> doc = new ArrayList<DocInfoDto>();

		try 
		{
			//get control signature successfactor
			String idUserSession = getSFUser();
			List<SignatureFileControl> signatureFileControlList = successFactorFacade.signatureGetFileControlList(idUserSession,UtilCodesEnum.CODE_STATUS_PPD_SIGNATURE_PENDING);
			SFSigningControlHeadDto response = ppdGeneratorFacade.actionGetSigningProcessList(idUserSession,signatureFileControlList);
			return Response.status(200).entity(response).build();

		} catch (Exception ex) {

			logger.error("> error - Connection was not working with PPDoc");
			logger.error(ex.toString());

			return Response.status(200).entity(doc).build();
		}
	}

	@GET
	@Path("/favorite")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getFav() {
		FavoriteDAO favDAO = new FavoriteDAO();
		Collection<Favorite> li = favDAO.findAllFav(getSFUser());
		return Response.status(200).entity(li).build();
	}

	@POST
	@Path("/favorite/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response addFavorite(@PathParam("id") String id) {
		String result = "500";
		result = "200";

		String user = getSFUser();

		FavoriteDAO favDAO = new FavoriteDAO();
		Favorite fav = new Favorite();
		fav.setUserId(user);
		fav.setTemplateId(id);
		fav.setKeyId(user + "_" + id);
		favDAO.saveNew(fav);

		return Response.status(200).entity(result).build();
	}

	@DELETE
	@Path("/favorite/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response deleteFavorite(@PathParam("id") String id) {
		String user = getSFUser();
		FavoriteDAO favDAO = new FavoriteDAO();
		Favorite fav = favDAO.findByID(user + "_" + id);
		favDAO.delete(fav);
		return Response.status(200).build();
	}

	@GET
	@Path("/me/{userId}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getLoggedInUser(@PathParam("userId") String userId) {
		SFUserDto sfUser = new SFUserDto();
		try 
		{
			if(userId==null || (userId!=null && userId.equals("null")))
				userId = getSFUser();
			
			sfUser = successFactorFacade.userGetProfile(userId, UtilCodesEnum.DATE_SOURCE_USER_ACTIVE.getCode());
			
			if(sfUser==null)
				sfUser = new SFUserDto();			
		} catch (Exception ex) 
		{
			logger.error("User '{}' could not be extracted from backend. The user will be initialized simply.", sfUser, ex);
			ex.printStackTrace();			
			sfUser = new SFUserDto();			
		}

		return Response.status(200).entity(sfUser).build();
	}

	private String getSFUser() {
		return (String) request.getSession().getAttribute(SessionCreateFilter.SF_USER_ID_ATTR_NAME);
	}

	@GET
	@Path("/teamHR/{id}/{source}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getTeamHRUser(@PathParam("id") String onlyActive, @PathParam("source") String namesource) {		
		logger.error(getSFUser());
		logger.error(onlyActive);
		logger.error(namesource);
		List<SFUserPhotoDto> sfUser = new ArrayList<>();
		try {
			if(!namesource.equals("all")){
				sfUser = successFactorFacade.teamGet(getSFUser(), onlyActive, namesource);
			}
		
			
		} catch (Exception ex) {
			logger.error("User '{}' could not be extracted from backend. The user will be initialized simply.", sfUser, ex);
			logger.error("error");
		}

		return Response.status(200).entity(sfUser).build();
	}
	
	@GET
	@Path("/teamManager/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getTeamManagerUser(@PathParam("id") String onlyActive) {
		logger.error(getSFUser());

		List<SFUserPhotoDto> sfUser = new ArrayList<>();
		try {
			sfUser = successFactorFacade.teamMGet(getSFUser(), onlyActive);

		} catch (Exception ex) {
			logger.error("User '{}' could not be extracted from backend. The user will be initialized simply.", sfUser, ex);
			logger.error("error");
		}

		return Response.status(200).entity(sfUser).build();
	}
	
	@GET
	@Path("/search/{id}/{id2}")
	@Produces(MediaType.APPLICATION_JSON) 
	public Response getSearchUser(@PathParam("id") String id,@PathParam("id2") String onlyActive) {
		logger.error(id);

		List<SFUserPhotoDto> sfUser = new ArrayList<>();
		try {
			sfUser = successFactorFacade.search(id, onlyActive);

		} catch (Exception ex) {
			logger.error("User '{}' could not be extracted from backend. The user will be initialized simply.", sfUser, ex);
			logger.error("error");
		}

		return Response.status(200).entity(sfUser).build();
	}

	@GET
	@Path("/image/{id}")
	@Produces({ "image/png", "image/jpg" })
	public Response getPhotoUser(@PathParam("id") String id) {
		logger.error("photo from : " + id);
		SFPhotoDto sfUser = null;
		try {
			sfUser = successFactorFacade.imgGet(id.replace("@2", ""));

			if (sfUser != null) {
				String st = sfUser.photo.replace("\n", "").replace("\r", "");
				sfUser.photo = st;
			} else {
				sfUser = new SFPhotoDto();
				sfUser.photo = "";
			}

			byte[] imgBytes = Base64.getDecoder().decode(sfUser.photo); 

			return Response.ok(imgBytes).status(200).header("content-disposition", "inline; filename = img.jpg").build();

		} catch (Exception ex) {
			logger.error("User '{}' could not be extracted from backend. The user will be initialized simply.", sfUser, ex);
			logger.error("error");

			return Response.status(404).build();
		}

	}

	@GET
	@Path("/count/pending")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getPending() 
	{
		String idUserSession = getSFUser();
		SuccessFactorAuthorization SFAuthoFacade = new SuccessFactorAuthorization();
		
		Map<String, Serializable> map = new HashMap<String, Serializable>();
		map.put("count", successFactorFacade.getCountDocumentByUserTemplate(idUserSession, 
				"'"+UtilCodesEnum.CODE_STATUS_PENDING_DOC.getCode()+"',"+
				"'"+UtilCodesEnum.CODE_STATUS_PENDING_SIGN_DOC.getCode()+"'")
				);
		
		map.put("count_sign", 
				(successFactorFacade.signatureFileControlCountByStatus(idUserSession,"'"+UtilCodesEnum.CODE_STATUS_PPD_SIGNATURE_PENDING.getCode()+"'")+
				 SFAuthoFacade.getAuthorizationCountByUser(idUserSession,"'"+UtilCodesEnum.CODE_MANAGER_PENDING.getCode()+"'","'"+UtilCodesEnum.CODE_MANAGER_PENDING.getCode()+"'"))
				);
		
		return Response.status(200).entity(map).build();
	}
	
	@GET
	@Path("/signatures/observation/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getSigningProcess(@PathParam("id") String id) {
		List<DocInfoDto> doc = new ArrayList<DocInfoDto>();

		try 
		{
			PpdSigningDataDto dataSigning = ppdGeneratorFacade.wServiceGetSigningProcess(id);
						
			return Response.status(200).entity(dataSigning).build();

		} catch (Exception ex) {

			logger.error("> error - Connection was not working with PPDoc");
			logger.error(ex.toString());

			return Response.status(200).entity(doc).build();
		}
	}

}
